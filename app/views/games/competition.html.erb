<!--

Game completion modals

-->

<!-- TODO: combine these somehow -->

<div id="winModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
    <h3 id="myModalLabel">You win!</h3>
  </div>
  <div class="modal-body">
    <p>Congratulations!</p>
  </div>
  <div class="modal-footer">
    <%= link_to "Back to games", main_app.liveGraph_path, class: "btn btn-primary" %>
  </div>
</div>

<div id="otherPlayerWonModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
    <h3 id="myModalLabel">The other player finished before you!</h3>
  </div>
  <div class="modal-body">
    <p>I am truly sorry for your lots</p>
  </div>
  <div class="modal-footer">
    <%= link_to "Back to games", main_app.liveGraph_path, class: "btn btn-primary" %>
  </div>
</div>

<div id="failedModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
    <h3 id="myModalLabel">Your solution is incorrect!</h3>
  </div>
  <div class="modal-body">
    <p>If the other player manages to submit a correct solution before the timer is up, he/she will win! Otherwise, the game will be a draw.</p>
  </div>
  <div class="modal-footer">
    <%= link_to "Back to games", main_app.liveGraph_path, class: "btn btn-primary" %>
  </div>
</div>

<!--

Game

-->

<% problem = Problem.find(@game.problem_id)%>
<div class="competition-div" id="competition-div">
	<div id="editor"></div>
	<div class="well well-small" id="console">
		<strong>Console:</strong>
		<i class="icon-chevron-up pull-right" id="toggleConsole"></i>
		<div id="consoleContent" class="well well-small">
		</div>
	</div>
	<div id="sideBar">
		<div class="well well-small text-center" id="timer">
       			<strong><%=problem.time%>:00</strong>
		</div>
		<div class="tabbable well well-small">
			<strong>Description:</strong>
			<div class="well well-small" id="challengeDescription">
              <p> <%=problem.description %></p>
			</div>
		</div>
		<div class="btn-group text-center" id="submissionBtns">
			<button type="button" class="btn btn-large" id="checkBtn">Check</button>
			<button type="button" class="btn btn-large" id="submitBtn">Submit</button>
		</div>
	</div>
</div>
<script>
	var editor = ace.edit("editor");
	editor.setTheme("ace/theme/clouds");
	editor.getSession().setMode("ace/mode/java");
	editor.setValue("<%=problem.templateClass%>");

	var randomString = '<%=	o = [('a'..'z'), ('A'..'Z'),(0..9)].map { |i| i.to_a }.flatten
				(0...20).map{ o[rand(o.length)] }.join%>';
	var activeEvent=false;
	var timeLimit= <%=problem.time%> *60*1000;
	var startTime = new Date().getTime();
	var consoleVisible = false

	function timerInterval(){
		return window.setInterval(function(){
			var secondsLeft = Math.round((timeLimit - (new Date().getTime() - startTime))/1000);
			if (secondsLeft<0){
				window.clearInterval(timInt);
				alert('you suck');
			}else{
				var minutes = Math.floor(secondsLeft/60);
				var seconds = ((secondsLeft%60)<10) ? '0'+secondsLeft%60 : secondsLeft%60;  
				$('#timer>strong').text(minutes+':'+seconds);
			}
		},1000);
	}
	var timInt = timerInterval();

	function addDots() {
		return window.setInterval(function() {
			$('#consoleContent').append(".");
		}, 700);
	}

	function draw() {
		var height=$(window).height();
		var width=$(window).width();
		$('#competition-div').height(height-90);
		$('#competition-div').width(width-30);
		$('#challengeDescription').height($(window).height()-302);
		$('#sideBar').width(width/2.618-63);
		$('#submissionBtns').width(width/2.618-63);
		$('#editor').width(1.618/2.618*width-13);
		$('#test').width(1.618/2.618*width-13);
		$('#console').width(1.618/2.618*width-33);
		if (!consoleVisible){
			$('#editor').height(height-173);
			$('#console').height(20);
		}else{
			$('#editor').height(1.618/2.618*(height-120)-7);
			$('#console').height(1/2.618*(height-120)-28);
			$('#consoleContent').height(1/2.618*(height-120)-68);
		}
		editor.resize()
	};
	$(window).resize(draw);
	draw();

	$('#checkBtn').click(function() { compileAndDo(run) });
	$('#submitBtn').click(function() { compileAndDo(submit) });

  function disableControls() {
		$('#checkBtn').addClass('disabled');
		$('#submitBtn').addClass('disabled');
  }

  function enableControls()
  {
		$('#checkBtn').removeClass('disabled');
		$('#submitBtn').removeClass('disabled');
  }

  function requestEventLock()
  {
    if (window.activeEvent || window.gameIsEnded)
      return false;

    window.activeEvent = true;
    disableControls();
    return true;
  }

  function releaseEventLock()
  {
    if (window.gameIsEnded)
      return;

    window.activeEvent = false;
    enableControls();
  }

// FIXME: The locking code above doesn't work correctly with endGame(). -js
  function endGame()
  {
    window.gameIsEnded = true;
    disableControls();
  }

  function requestCompilation()
  {
    // TODO: This should be $.post(), not $.ajax. $.post(), for some reason, posts to the wrong URL.
    // I can't figure out why. -js
    return $.ajax({
      type: 'POST',
      url: '/games/compile',
      data: {
        "<%= request_forgery_protection_token.to_s%>": "<%= form_authenticity_token%>",
			  "problem_id": <%= @game.problem_id %>,
        "code": editor.getValue()
      }
    });
  }

  function requestRun()
  {
    return $.ajax({
      type: 'POST',
      url: '/games/run',
      data: {
        "<%= request_forgery_protection_token.to_s%>": "<%= form_authenticity_token%>",
        "game_id": <%= @game.id %>
      }
    });
  }

  // Compiles the code and runs function 'f' on success.
  function compileAndDo(f)
  {
    if (!requestEventLock())
      return true; 

    showConsole();
		$('#consoleContent').text("Compiling");
    var dots = addDots;

    // Post a compile request
    compileXHR = requestCompilation()
      // Compile success
      .done(function(result) {
				window.clearInterval(dots);
				$('#consoleContent').append(' Compilation complete in ' + Math.round(result.deltaTime) + 'ms')
        f();
      })
      // Compile failure
      .fail(function(result) {
				$('#consoleContent').append(' Compilation failed:');
				consoleWriter(result.responseJSON.errors,'red')
      })
      // Compile exit
      .always(function() {
        releaseEventLock();
      });
  }

  function run()
  { 
    dots = addDots;
    // Post a run request
    runXHR = requestRun()
      .done(function(result) {
			$('#consoleContent').append('<br />Execution complete in '
                            + Math.round(result.responseJSON.deltaTime)
                            + 'ms');
      })
      .fail(function(result) { 
				consoleWriter(result.responseJSON.error, 'red');
      });

    return runXHR;
  }

  // FIXME: The call is still sent to /games/run, not /games/submit. Oops.
  // There should be some way to change the settings of an existing jqXHR object. -js
  function submit()
  {
    runXHR = run()
      // Player's code executes successfully
      .done(function(result) {
        // The other player succeeded before current player
        if (result.responseJSON.outcome == "fail") {
          $('#otherPlayerWonModal').modal('show');
          return;
        }
        // Current player succeeded first
        $('#winModal').modal('show');
      })
      .fail(function() { 
        $('#failedModal').modal('show');
      });
  }

	function consoleWriter(text,color){
		var spl = text.split("\n");
		for(var i=0;i<spl.length-1;i++){
			var leadingSpace="";
			var line=spl[i];
			var j = 0;
			while(line.charAt(0)=="\t"||line.charAt(0)==" "){
				if(line.charAt(0)=="\t"){
					leadingSpace+="&nbsp;&nbsp;&nbsp;&nbsp;";
				}else{
					if(j%2==0){
						leadingSpace+="&nbsp;";
					}
					j++;
				}
				line=line.slice(1);
			}
			$('#consoleContent').append('<br />'+leadingSpace+'<code style="color:'+color+'"></code>');
			$('#consoleContent>code').last().text(line);
		}
	}

	$('#toggleConsole').click(function(){
		if(consoleVisible){
			hideConsole();
		}else{
			showConsole();
		}
	});
	
	function showConsole(){
		$('#toggleConsole').removeClass('icon-chevron-up').addClass('icon-chevron-down');
		$('#consoleContent').css("display","block");
		consoleVisible=true
		draw();
	}
	function hideConsole(){
		$('#toggleConsole').removeClass('icon-chevron-down').addClass('icon-chevron-up');
		$('#consoleContent').css("display","none");
		consoleVisible=false
		draw();

	}
</script>
